{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>LocalTuya is an HomeAssistant integration that enables you to control your Tuya-based smart devices directly within your local network. </p> <p>LocalTuya is a Hub </p> <p><code>LocalTuya</code> serves as a hub. After setup, whether using <code>cloud</code> or <code>no cloud</code>, you can manage your devices through the entry configuration UI in <code>hub configuration</code>. </p> <p>Cloud API</p> <p>LocalTuya uses the cloud only to obtain device data and pre-fill the required fields for you.</p> <p>It offers many features to simplify device setup.</p> <p><code>LocalTuya</code> can be used independently of the cloud.</p> <p> Usage  Add repository to HACS</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Cloud API <code>Optional - Only used to assist in the devices setup process</code></li> <li>Supported Sub-devices: <code>Devices that function through gateways</code></li> <li>Auto-configure devices - <code>Requires a cloud API setup</code></li> <li>Automatic insertion - <code>Requires a cloud API setup</code></li> <li>Devices discovery - <code>Discovers Tuya devices on your network</code> </li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Binary Sensor</li> <li>Button</li> <li>Climate</li> <li>Cover</li> <li>Fan</li> <li>Humidifier</li> <li>Light</li> <li>Number</li> <li>Selector</li> <li>Sensor</li> <li>Siren</li> <li>Switch</li> <li>Vacuum</li> </ul>"},{"location":"auto_configure/","title":"Auto configure devices","text":"<p>Localtuya can disocver you device entities if cloud is enable because the feature at the moment rely on <code>DP code</code> and Devices Category.</p> <p>By known the <code>category</code> we use that to get all the possible entities from stored data. Data stored in <code>/localtuya/core/ha_entities</code> (1)</p> <ol> <li>Files are named with entities type  </li> </ol> DPCodes data <p>All known <code>Codes</code> are stored in <code>base.py</code> in <code>DPCode Class</code>.  If class doesn't contains your <code>DPCode</code> Add it, <code>DPCode class sorted in alphabetically</code>.</p> <p>How to get the <code>Codes and DP</code></p> <p>You can download your device data in your <code>Home Assistant</code> by <code>Downloading Diagnostics</code>.</p> <ol> <li>Download <code>device</code> diagnostics <code>localtuya</code> from device page. (1) <code>file -&gt; device_cloud_info</code></li> <li>Or download <code>entry</code> diagnostics <code>note: It contains all devices data</code> (2) <code>file -&gt; cloud_devices</code></li> </ol> <p>Inside downloaded <code>txt file</code>, in <code>cloud_data object</code> look for your <code>device_id -&gt; dps_data</code> (3)</p> <ol> <li></li> <li></li> <li>TIP: Search for device name instead of <code>device_id</code></li> </ol> <p>Now that we know the device <code>category</code> and <code>Codes</code> we can start add the entities.</p> <p>In <code>/localtuya/core/ha_entities</code> open the file named with <code>entity type</code> you want to add. All files contains <code>constant dict</code> (1) includes all known <code>categories</code> and possible entities.</p> <ol> <li>e.g <code>COVERS or SWITCHES</code></li> </ol> <p>Look for the <code>category</code> it already exist modify it and add the missing <code>entities</code>.</p> <p>Using <code>LocalTuyaEntity class</code> we pass entity parameters <code>id</code> and <code>DPs config name as keys and DPCode as values</code> Config names has to be supported by <code>localtuya</code> (1)</p> <ol> <li>All entities platforms has <code>id</code> config name. but some has more DPs configs names For example: <code>cover platforms</code> has config names for <code>current_position_dp</code> and  <code>set_position_dp</code> </li> </ol>"},{"location":"auto_configure/#examples","title":"Examples","text":"Add <code>code: switch_4</code> into <code>SWITCHES</code> in <code>kg</code> category <pre><code>\"kg\": (\n    LocalTuyaEntity(\n        id=DPCode.SWITCH_4, # REQUIRED: id config name = look DP with code `switch_4`\n        name=\"Switch 4\", # Name the entity: `Switch 4`\n        icon=\"mdi:icon_name\",  # icon for the entity\n        entity_category=EntityCategory.CONFIG, # Show entity in this category\n    ),\n),\n</code></pre> Add <code>switch</code> into <code>SWITCHES</code> in <code>cl</code> category: with condition <pre><code>\"cl\": (\n    LocalTuyaEntity(\n        id=DPCode.CONTROL_BACK,\n        name=\"Reverse\",\n        icon=\"mdi:swap-horizontal\",\n        entity_category=EntityCategory.CONFIG,\n        condition_contains_any=[\"true\", \"false\"],\n    ),\n),\n</code></pre> Add <code>cover</code> into <code>COVERS</code> in <code>cl</code> category <pre><code>\"cl\": (\n    LocalTuyaEntity(\n        id=DPCode.CONTROL,\n        name=\"Curtain\",\n        custom_configs=localtuya_cover(\"open_close_stop\", \"position\"), # localtuya config\n        current_state=DPCode.SITUATION_SET,\n        current_position_dp=(DPCode.PERCENT_CONTROL, DPCode.PERCENT_STATE),#(1)!\n        set_position_dp=DPCode.PERCENT_CONTROL,\n    ),\n),\n</code></pre> <ol> <li><code>current_position_dp</code> will search for DP of two possible codes and will take the first <code>DP</code> found.</li> </ol>"},{"location":"cloud_api/","title":"Cloud API Setup","text":"<p>The Tuya integration integrates all Powered by Tuya devices you have added to the Tuya Smart and Tuya Smart Life apps.</p> <p>Note</p> <p>LocalTuya uses the cloud to obtain your device's data, making the configuration of devices much simpler.</p>"},{"location":"cloud_api/#configuration-of-the-tuya-iot-platform","title":"Configuration of the Tuya IoT Platform","text":""},{"location":"cloud_api/#prerequisites","title":"Prerequisites","text":"<ul> <li>Your devices need first to be added in the Tuya Smart or Smart Life app.</li> <li>You will also need to create an account in the Tuya IoT Platform. This is a separate account from the one you made for the app. You cannot log in with your app's credentials.</li> </ul>"},{"location":"cloud_api/#create-a-project","title":"Create a project","text":"<ol> <li>Log in to the Tuya IoT Platform.</li> <li>In the left navigation bar, click <code>Cloud</code> &gt; <code>Development</code>. </li> <li>On the page that appears, click <code>Create Cloud Project</code>.</li> <li> <p>In the <code>Create Cloud Project</code> dialog box, configure <code>Project Name</code>, <code>Description</code>, <code>Industry</code>, and <code>Data Center</code>. For the <code>Development Method</code> field, select <code>Smart Home</code> from the dropdown list. For the <code>Data Center</code> field, select the zone you are located in. Refer to the country/data center mapping list here to choose the right data center for the country you are in.</p> <p></p> </li> <li> <p>Click <code>Create</code> to continue with the project configuration.</p> </li> <li>In Configuration Wizard, make sure you add <code>Industry Basic Service</code>, <code>Smart Home Basic Service</code> and <code>Device Status Notification</code> APIs. The list of API should look like this:   </li> <li>Click <code>Authorize</code>.</li> </ol>"},{"location":"cloud_api/#link-devices-by-app-account","title":"Link devices by app account","text":"<ol> <li>Navigate to the <code>Devices</code> tab.</li> <li>Click <code>Link App Account</code> &gt; <code>Add App Account</code>.   </li> <li> <p>Scan the QR code that appears using the <code>Tuya Smart</code> app or <code>Smart Life</code> app using the 'Me' section of the app.</p> <p></p> </li> <li> <p>Click <code>Confirm</code> in the app.</p> </li> <li>To confirm that everything worked, navigate to the <code>All Devices</code> tab. Here you should be able to find the devices from the app.</li> <li>If zero devices are imported, try changing the DataCenter and check the account used is the \"Home Owner\".    You can change DataCenter by clicking the Cloud icon on the left menu, then clicking the Edit link in the Operation column for your newly created project. You can change DataCenter in the popup window.</li> </ol> <p></p>"},{"location":"cloud_api/#get-authorization-data","title":"Get authorization data","text":"<p>Click the created project to enter the <code>Project Overview</code> page and get the <code>Authorization Key</code>. You will need these for setting up the integration. in the next step.</p> <p></p> <p><code>Data center region</code>:      Choose the country you picked when signing up.</p> <p><code>Client ID</code>:     Go to your cloud project on Tuya IoT Platform. in the Overview tab.</p> <p><code>Client Secret</code>:     Go to your cloud project on Tuya IoT Platform. in the Overview tab.</p>"},{"location":"cloud_api/#get-user-id","title":"Get USER ID","text":"<p>Navigate to the <code>Devices</code> tab -&gt; click on <code>Link Tuya App Account</code> Copy <code>UID &lt;- is User ID</code>.</p> <p></p>"},{"location":"cloud_api/#error-codes-and-troubleshooting","title":"Error codes and troubleshooting","text":"1004: sign invalid <p>Incorrect Access ID or Access Secret. Please refer to the Configuration part above.</p> 1106: permission deny <ul> <li> <p>App account not linked with cloud project: On the Tuya IoT Platform, you have linked devices by using Tuya Smart or Smart Life app in your cloud project. For more information, see Link devices by app account.</p> </li> <li> <p>Incorrect username or password: Enter the correct account and password of the Tuya Smart or Smart Life app in the Account and Password fields (social login, which the Tuya Smart app allows, may not work, and thus should be avoided for use with the Home Assistant integration). Note that the app account depends on which app (Tuya Smart or Smart Life) you used to link devices on the Tuya IoT Platform.</p> </li> <li> <p>Incorrect country. You must select the region of your account of the Tuya Smart app or Smart Life app.    </p> </li> </ul> 1100: param is empty <p>Empty parameter of username or app. Please fill the parameters refer to the Configuration part above.</p> 2406: skill id invalid <ul> <li> <p>Make sure you use the Tuya Smart or SmartLife app account to log in. Also, choose the right data center endpoint related to your country region. For more details, please check Country Regions and Data Center. </p> </li> <li> <p>Your cloud project on the Tuya IoT Development Platform should be created after May 25, 2021. Otherwise, you need to create a new project. </p> </li> <li> <p>This error can often be resolved by unlinking the app from the project (<code>Devices</code> tab &gt; <code>Link Tuya App Account</code> &gt; <code>Unlink</code>) and relinking it again.</p> </li> </ul> 28841105: No permissions. This project is not authorized to call this API <p>Some APIs are not authorized, please Subscribe then Authorize. The following APIs must be subscribed for this tutorial:</p> <pre><code>- Device Status Notification\n\n- Industry Basic Service\n\n- Smart Home Basic Service\n\n- Authorization\n\n- IoT Core\n\n- Smart Home Scene Linkage\n\n- IoT Data Analytics\n</code></pre> 28841002: No permissions. Your subscription to cloud development plan has expired <p>Your subscription to Tuya cloud development IoT Core Service resources has expired, please extend it in <code>Cloud</code> &gt; <code>Cloud Services</code> &gt; <code>IoT Core</code> &gt; <code>My Subscriptions</code> tab &gt; <code>Subscribed Resources</code> &gt; <code>IoT Core</code> &gt; <code>Extend Trial Period</code>. </p>"},{"location":"cloud_api/#document-source","title":"Document source","text":"<p>Home Assistant Tuya</p>"},{"location":"ha_events/","title":"Events","text":"<p>Your device must be added to localtuya to use Events</p> <p>Localtuya fires an events on <code>homeassisstant</code>  that can be used on automation or monitoring your device behaviour from Developer tools -&gt; events (1)</p> <ol> <li>to monitor your device subscribe to any event below and trigger action on the device using tuya app</li> </ol> <p>With this you can automate devices such as <code>scene remote</code> (1) to trigger an action on <code>homeassistant</code></p> <ol> <li>e.g. <code>single click</code>, <code>double click</code> or <code>hold</code>.</li> </ol> Event Data <code>localtuya_status_update</code> <code>{\"data\": {\"device_id\", \"old_status\", \"new_status\"} }</code> <code>localtuya_device_dp_triggered</code> <code>{\"data\": {\"device_id\", \"dp\", \"value\"} }</code> <p>Examples </p> localtuya_states_updatelocaltuya_device_dp_triggered <pre><code># This will only triggers if status changed.\ntrigger:\n  - platform: event\n    event_type: localtuya_status_update\ncondition: []\naction:\n  - service: persistent_notification.create\n    data:\n      message: \"{{ trigger.event.data }}\"\n</code></pre> <pre><code># This will always triggers if DP used.\ntrigger:\n  - platform: event\n    event_type: localtuya_device_dp_triggered\ncondition: []\naction:\n  - service: persistent_notification.create\n    data:\n      message: \"{{ trigger.event.data }}\"\n</code></pre> example of an automation to trigger a scene when the first button on a remote is single-clicked <pre><code>trigger:\n  - platform: event\n    event_type: localtuya_device_dp_triggered\n    event_data:\n      device_id: bfa2f86e3068440a449dhd\n      dp: \"1\" # quotes are important for dp\n      value: single_click \ncondition: []\naction:\n  - service: persistent_notification.create\n    data:\n      message: \"{{ trigger.event.data }}\"\n</code></pre> <p>Database flooding</p> <p>If the recorder is enabled, devices like temperature sensors may update frequently (e.g., every second).  This can cause excessive events and significantly increase database size.  It is recommended to exclude localtuya events from the recorder to prevent database overload.</p> <pre><code>recorder:\n  exclude:\n    event_types:\n      - localtuya_status_update\n      - localtuya_device_dp_triggered\n</code></pre>"},{"location":"ha_services/","title":"Services","text":"Service Data Description <code>localtuya.reload</code> Reload All <code>localtuya</code> entries <code>localtuya.set_dp</code> <code>{\"data\": {\"device_id\", \"dp\", \"value\"}}</code> Set new value for one <code>DP</code> or multi <code>localtuya.remote_add_code</code> <code>{\"data\": {\"target\", \"device_name\", \"command_name\", \"base64\", \"head\", \"key\" }}</code> Manually add code into remote device. Set DP ServiceReload ServiceAdd Remote Code <p>Change the value of DP 1<pre><code>service: localtuya.set_dp\ndata:\n  device_id: 11100118278aab4de001\n  dp: 1\n  value: true\n</code></pre> Change the values for multi DPs<pre><code>service: localtuya.set_dp\ndata:\n  device_id: 11100118278aab4de001 #(1)!\n  value:\n    \"1\": true  # (2)!\n    \"2\": true  # (3)!\n    \"3\": false # (4)!\n</code></pre></p> <ol> <li>Device with this ID must be added into <code>localtuya</code></li> <li>Set <code>DP 1</code> Value to <code>true</code></li> <li>Set <code>DP 2</code> Value to <code>true</code></li> <li>Set <code>DP 3</code> Value to <code>false</code></li> </ol> <p>Reload all <code>LocalTuya</code> Entries <pre><code>service: localtuya.reload\n</code></pre></p> <p>Add a TV button using <code>head/key</code> or <code>base64</code> <pre><code>action: localtuya.remote_add_code\ndata:\n  target: c187a2102cb1e38161377eb4d4afb6f7\n  device_name: TV\n  command_name: volume_up\n  head: \"11111111111\" # Head: Can be obtain from Tuya IoT device debug logs.\n  key: \"223123\" # Key: Can be obtain from Tuya IoT device debug logs.\n</code></pre></p>"},{"location":"report_issue/","title":"Report an issue","text":"<p>Whenever you write a bug report, it's incredibly helpful to include debug logs directly. Otherwise, we'll need to request them separately, prolonging the process. Please enable debug logs as shown and include them in your issue:</p>"},{"location":"report_issue/#enable-from-the-ui","title":"Enable from the UI","text":"<p>Via UI (1) <code>Reload integration after enabling the debug from the UI</code></p>"},{"location":"report_issue/#enable-from-configuration-file","title":"Enable from Configuration file","text":"<p>Configuration.yaml file <code>Recommended</code>  Add the below line into your <code>configuration.yaml</code> that located in HA config directory. </p> <p>Note</p> <p>Editing the <code>configuration</code> file will require an HA restart to apply the changes.</p> <pre><code>logger:\n  default: warning\n  logs:\n    custom_components.localtuya: debug\n    custom_components.localtuya.pytuya: debug\n</code></pre>"},{"location":"report_issue/#enable-device-debug","title":"Enable device debug.","text":"<p>Then, edit the device that is showing problems and check the <code>Enable debugging for this device</code> (1)</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#low-power-devices","title":"Low Power Devices","text":"<p>A device that has Low Power Mode, applied on such as <code>Wi-Fi door locks and sensors</code>.  The device will report its status every x minutes. Most of the time, the device will go into sleep mode, and most likely it will disconnect from the network. Some Device has an option to control the reports period. In order to add this device, you need to specify the device sleep time in the device configartion. </p> <p>If you add the device while it's sleeping and it's <code>disconnected</code> from the network, it won't connect  If you changed any value on the device while it is asleep, the new states will be applied when it wakes up.  Try to avoid WiFi Sensors devices and go for BLE or ZigBee.</p> <p></p>"},{"location":"faq/#ir-remotes","title":"IR Remotes","text":"<p>Usually, the IR remote devices doesn't have DPS status, so if you encounter an error <code>no datapoints could be found</code> If the device information is incorrect, this won't work.  you can ignore the handshake (which fails if no DPS is found) by adding <code>0</code> in the manual DPS field.</p> <p></p>"},{"location":"faq/#zigbee-gateway","title":"ZigBee Gateway","text":"<p>The ZigBee gateway isn't supposed to be added unless it has more features other than just being a hub.  Otherwise, if you added them, you will encounter an error stating <code>no datapoints could be found</code>.</p> <p></p>"},{"location":"faq/#devices-discovery","title":"Devices Discovery","text":"<p>By default, <code>LocalTuya</code> includes a discovery feature that scans for Tuya devices within the local network and lists them in the config flow.  However, this function requires Home Assistant to have the same subnets as Tuya devices</p> <p></p>"},{"location":"faq/#cloud-pull","title":"Cloud Pull","text":"<p>The cloud pull feature is just something I added to inform users that there might be some DPS that can be used, but weren't reported by the device.  Most of the cloud-pulled DPS aren't really useful; they might be encrypted or have empty values.  However, it won't change the fact that the device contains these DPS, so using them is up to the user.</p>"},{"location":"usage/configure_add_device/","title":"Add new devices","text":"<p>Before You Start</p> <p>You must have your device's <code>localkey</code> and <code>ID</code> to add your device to LocalTuya. The easiest way is to configure the Cloud API account in the integration.</p> <p>If you want to obtain the <code>id and localkey</code> without configuring the cloud API, good guides are available for  TuyaAPI Setup,  TinyTuya,  or MarkVideo.</p> <p>Important</p> <p>Before adding any device, ensure that <code>Smart Life</code> and <code>Tuya Smart</code> apps are closed on your phones. Devices shouldn't be added to different local integrations as some Tuya devices can only accept one local connection at a time.</p> <p>After setting up the integration, you can now manage your devices by <code>adding</code> or <code>editing</code> them. Go to hub <code>Configure</code> (1) a menu will show up (2) Choose <code>Add new device</code></p> <ol> <li>\"The <code>Reconfigure existing device</code> option will appear if there are devices that have already been set up.\" </li> </ol> <p>Discovery</p> <p>By default, <code>LocalTuya</code> includes a discovery feature that scans for Tuya devices within the local network and lists them in the config flow. However, this function requires Home Assistant to be connected to the same network as the Tuya devices and to have the same subnets.</p> <ol> <li> <p>Selecting <code>Add new device</code> will display a new page with the listed discovered devices (1)  Select the device you wish to configure, then click on <code>Submit</code>.</p> <ol> <li>If the device is configured on a Tuya account, the ID will be replaced with the name. If not, it will remain as <code>... (IP)</code> </li> </ol> </li> <li> <p><code>Configure device</code>: Fill in the fields that are still missing and are <code>required</code></p> Device Name <p>A name for the device, for example, <code>Bedroom 2G</code> Following this, entities ID will be associated with the device name.  e.g. an entity named <code>switch 1</code> will have an <code>entity id</code> <code>switch.bedroom_2g_switch_1</code>.</p> IP <p>The device's IP Address e.g., <code>192.168.1.55</code>. <code>This is automatically inserted if you choose a discovered device</code></p> Device ID <p>The device ID See top note.<code>Automatically inserted if you choose a discovered device</code></p> Local Key <p>The localkey for the device. See top note <code>Automatically inserted if the cloud API is configured and the device is added to the account</code></p> (optional) Enable Debug <p>Device will send <code>Debug messages</code> in logs. <code>Use it if you have issues and want to track them</code>  You need to enable logger debug in <code>configuration.yaml</code> for localtuya.  <pre><code>logger:\n  logs:\n    custom_components.localtuya: debug\n    custom_components.localtuya.pytuya: debug\n</code></pre></p> (optional) Scan Interval <p>Only needed if energy/power values are not updating frequently enough by default. Values less than 10 seconds may cause stability issues</p> (Optional) Manual DPS <p>Needed if the device doesn't advertise the DPS correctly until the entity has been properly initialized. This setting can often be avoided by first connecting/initializing the device with the Tuya App, then closing the app, and then adding the device to the integration. Note: Any DPS added using this option will have a <code>-1</code> value during setup e.g. <code>20,21,22</code></p> (Optional) DPIDs Reset <p>Used when a device doesn't respond to any Tuya commands after a power cycle, but can be connected to (zombie state). This scenario mostly occurs when the device is blocked from accessing the internet. The DPids will vary between devices, but typically \"18,19,20\" is used. If the wrong entries are added here, then the device may not come out of the zombie state. Typically only sensor DPIDs entered here.</p> (optional) Device Sleep Time <p>Only needed if the device has low-power mode and is disconnected from the network. FAQ  If the device is disconnected and exceeds this time, it will be considered offline</p> (Optional) Node ID or CID <p><code>Node ID</code> also known as <code>CID</code> only for sub devices that work through <code>Gateways</code> e.g. <code>ZigBee</code> and <code>BLE</code> Devices. </p> </li> <li> <p>After a successful connection, it's time to set up the entities.</p> </li> </ol>"},{"location":"usage/configure_add_device/#configure-device-methods","title":"Configure device methods","text":"<p>How does localtuya work</p> <p>Before setting up device entities, let me explain how <code>LocalTuya</code> control devices: Tuya devices have different functions such as Switch 1, Switch 2, and more, each identified by a DP ID. <code>LocalTuya</code> configures entities by using and managing the function values using their respective DP IDs. LocalTuya will pull these functions for you to set them up as Home Assistant entities</p>"},{"location":"usage/configure_add_device/#discover-device-entities-automatically","title":"Discover device entities automatically","text":"<p>Automatic setup is only supported for CloudAPI setup. Note: It's possible to tweak the entities config later after auto configure.</p> <p></p>"},{"location":"usage/configure_add_device/#configure-device-entities-manually","title":"Configure device entities manually","text":"<p>Below, I used <code>2 Gang Tuya Switch</code> as an example</p> <p>This option will work for everyone, but it's more advanced.</p> <ol> <li> <p>Selecting the manual setup option will bring up a new page listing supported platforms <code>platforms</code> (1) Each platform has its unique configuration page with different sets of configuration fields.  </p> <ol> <li></li> </ol> </li> <li> <p>Configure <code>switch platform</code> (1)</p> <ol> <li></li> </ol> <p><code>DP</code> fields (1)</p> <p>The DP fields will display all the DP IDs reported by the device along with their respective values (3) Taking <code>1 (code: switch_1, value: False)</code> as an example DP <code>1</code> refers to <code>1st gang on my switch</code>, it's <code>off</code> due to its value being False (2)</p> Multi <code>DP</code> Fields <p>Some platform configurations consist of multiple DP fields. For example, in the <code>climate</code> there are DPs to toggling on and off, as well as for setting the temperature and change mode </p> <ol> <li></li> <li><code>DP 1</code> Switch 1 is <code>OFF</code> <code>[1st gang]</code> <code>DP 2</code> Switch 2 is <code>OFF</code> <code>[2nd gang]</code> <code>DP 7</code> Switch 1 Timer is <code>0</code> <code>DP 8</code> Switch 2 Timer is <code>0</code> </li> <li><code>Code only shows if cloud setup</code></li> </ol> <p>Most DP fields are optional, but the ID is always required. For example, select the Switch platform and set the ID to 1.  This will configure a switch entity that controls the <code>first Gang switch</code> </p> </li> <li> <p>When submitting the first entity, if there are additional unconfigured DP IDs, it will prompt you to either complete the process or add more entities (1)</p> <ol> <li></li> </ol> <p>I unchecked <code>Finish configuring entities</code> and repeated <code>step 2</code> to add another <code>switch</code> entity that controls <code>ID 2</code> &lt;- <code>2nd Gang switch</code> </p> </li> <li> <p>After completing the addition of entities, check <code>Finish configuring entities</code> and submit to add your device and entities </p> </li> </ol>"},{"location":"usage/configure_add_device/#use-saved-template","title":"Use saved template","text":"<p>Templates</p> <p>You can import a ready-to-go device configuration through the 'add device' process. This feature is useful for creating backups, sharing configurations,  or setting up similar devices. All templates stored in the 'templates' directory will be listed in the 'Use saved template' step. Templates directory located in <code>custom_components/localtuya/templates</code></p>"},{"location":"usage/configure_add_device/#create-templates","title":"Create templates","text":"<p>There are two ways to create templates</p> <ol> <li>Export a configured device from the Reconfigure existing device step</li> <li>Manually write the configuration <code>YAML</code> file <code>Not Recommended</code></li> </ol> <code>Cover</code> template example <pre><code>- cover:\n    commands_set: open_close_stop\n    current_position_dp: '3'\n    entity_category: None\n    friendly_name: Blind\n    id: '1'\n    platform: cover\n    position_inverted: false\n    positioning_mode: position\n    set_position_dp: '2'\n    span_time: 25.0\n- select:\n    entity_category: config\n    friendly_name: Motor Direction\n    id: '5'\n    is_passive_entity: false\n    platform: select\n    restore_on_reconnect: false\n    select_options:\n        back: Back\n        forward: Forward\n- select:\n    entity_category: config\n    friendly_name: Motor Mode\n    id: '106'\n    is_passive_entity: false\n    platform: select\n    restore_on_reconnect: false\n    select_options:\n        contiuation: Auto\n        point: Manual\n- binary_sensor:\n    device_class: problem\n    entity_category: diagnostic\n    friendly_name: Fault\n    id: '12'\n    platform: binary_sensor\n    state_on: '1'\n</code></pre>"},{"location":"usage/configure_edit_device/","title":"Reconfigure Devices","text":"<p>Click on <code>Configure</code> (1) a menu will show up (2) Choose <code>Reconfigure existing device</code></p> <p>The <code>Reconfigure existing device</code> (1) operates similarly to the <code>Add Device</code> steps, but it allows you to modify existing entities or add new ones</p>"},{"location":"usage/configure_edit_device/#delete-entities","title":"Delete entities","text":"<p>You can delete the entity by uncheck the entity you want to remove on <code>reconfigure device step</code></p> <p></p>"},{"location":"usage/devices_delete/","title":"Delete Devices","text":"<ol> <li>Go to your device page in Home Assistant.</li> <li>On the device info panel, click on the  and select on delete</li> </ol> Example image"},{"location":"usage/installation/","title":"Install Integration","text":"<p>If you haven't added the repository to <code>HACS</code>.</p> <p> Add repository to HACS</p> <p></p>"},{"location":"usage/installation/#add-hub","title":"Add HUB","text":"<ol> <li> <p>Adding hub options:</p> <p>a. Go to the integration page in HA and click on <code>ADD INTEGRATION</code> in the bottom right corner.</p> <p>b. Or use MY: Add Integration </p> </li> <li> <p>Adding a new hub will introduce you to this configuration page (1)</p> <ol> <li></li> </ol> <p>a. If you prefer not to set up the cloud API, check <code>Disable Cloud API?</code></p> <p>b. If you've set up a <code>cloud</code> account, you should have all the necessary information  Get authentication data.</p> </li> </ol>"}]}